name: Build M3UStream APK
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/main.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install SDK
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Generate Android project (M3U + Xtream + Idioma + EPG + PIP)
        run: |
          python3 - <<'PY'
          import os, textwrap, pathlib
          ROOT = pathlib.Path("M3UStream")
          APP = ROOT/"app"/"src"/"main"
          JAVA = APP/"java"/"com"/"example"/"m3ustream"
          RES  = APP/"res"
          def w(p, c):
              p.parent.mkdir(parents=True, exist_ok=True)
              p.write_text(textwrap.dedent(c).lstrip(), encoding="utf-8")
          # settings.gradle
          w(ROOT/"settings.gradle", """
          pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories { google(); mavenCentral() }
          }
          rootProject.name = "M3UStream"
          include(":app")
          """)
          # root build.gradle
          w(ROOT/"build.gradle", """
          buildscript {
              ext { compose_ui_version = '1.6.8' }
              repositories { google(); mavenCentral() }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.2.2'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22"
              }
          }
          """)
          # app/build.gradle (API 35 estable para compilar online)
          w(ROOT/"app"/"build.gradle", """
          apply plugin: 'com.android.application'
          apply plugin: 'org.jetbrains.kotlin.android'
          android {
              namespace 'com.example.m3ustream'
              compileSdkVersion 35
              defaultConfig {
                  applicationId "com.example.m3ustream"
                  minSdkVersion 26
                  targetSdkVersion 35
                  versionCode 1
                  versionName "1.0.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  vectorDrawables { useSupportLibrary true }
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug { minifyEnabled false }
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
                  coreLibraryDesugaringEnabled true
              }
              kotlinOptions { jvmTarget = '17' }
              buildFeatures { compose true; buildConfig true }
              composeOptions { kotlinCompilerExtensionVersion '1.5.8' }
              packagingOptions { resources { excludes += '/META-INF/{AL2.0,LGPL2.1}' } }
          }
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.22"
              implementation 'androidx.core:core-ktx:1.13.1'
              implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
              implementation 'androidx.activity:activity-compose:1.9.2'
              implementation 'androidx.compose.ui:ui:1.6.8'
              implementation 'androidx.compose.ui:ui-tooling-preview:1.6.8'
              implementation 'androidx.compose.material3:material3:1.2.1'
              debugImplementation 'androidx.compose.ui:ui-tooling:1.6.8'
              implementation 'com.google.android.exoplayer:exoplayer:2.19.1'
              implementation 'com.google.android.exoplayer:extension-mediasession:2.19.1'
              implementation 'io.coil-kt:coil-compose:2.6.0'
              coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
          }
          """)
          # proguard
          w(ROOT/"app"/"proguard-rules.pro", "# vacío")
          # Manifest
          APP = ROOT/"app"/"src"/"main"
          JAVA= APP/"java"/"com"/"example"/"m3ustream"
          RES = APP/"res"
          w(APP/"AndroidManifest.xml", """
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.INTERNET"/>
              <application
                  android:name=".App"
                  android:label="M3UStream"
                  android:icon="@mipmap/ic_launcher"
                  android:allowBackup="true"
                  android:usesCleartextTraffic="true"
                  android:supportsRtl="true">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:supportsPictureInPicture="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          """)
          # recursos mínimos
          w(RES/"values"/"strings.xml", "<resources><string name=\"app_name\">M3UStream</string></resources>\n")
          w(RES/"mipmap-anydpi-v26"/"ic_launcher.xml", """
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
              <background android:drawable="@android:color/black"/>
              <foreground android:drawable="@android:color/white"/>
          </adaptive-icon>
          """)
          w(RES/"mipmap-anydpi-v26"/"ic_launcher_round.xml", """
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
              <background android:drawable="@android:color/black"/>
              <foreground android:drawable="@android:color/white"/>
          </adaptive-icon>
          """)
          # Kotlin base
          w(JAVA/"App.kt", "package com.example.m3ustream\nimport android.app.Application\nclass App: Application()\n")
          w(JAVA/"Network.kt", """
          package com.example.m3ustream
          import java.net.HttpURLConnection
          import java.net.URL
          object Network {
              fun fetchText(url: String): String {
                  val c = URL(url).openConnection() as HttpURLConnection
                  c.connectTimeout = 15000; c.readTimeout = 20000; c.requestMethod = "GET"
                  c.setRequestProperty("User-Agent", "M3UStream/1.0")
                  c.inputStream.bufferedReader().use { return it.readText() }
              }
          }
          """)
          w(JAVA/"Prefs.kt", """
          package com.example.m3ustream
          import android.content.Context
          object Prefs {
              fun favs(ctx: Context): MutableSet<String> =
                  ctx.getSharedPreferences("m3u_prefs", Context.MODE_PRIVATE)
                     .getStringSet("favs", emptySet())?.toMutableSet() ?: mutableSetOf()
              fun toggleFav(ctx: Context, key: String): Set<String> {
                  val p = ctx.getSharedPreferences("m3u_prefs", Context.MODE_PRIVATE)
                  val s = favs(ctx); if (s.contains(key)) s.remove(key) else s.add(key)
                  p.edit().putStringSet("favs", s).apply(); return s
              }
          }
          """)
          # Playlist + parser (idioma + tvg-id)
          w(JAVA/"playlist"/"Channel.kt", """
          package com.example.m3ustream.playlist
          data class Channel(
              val name: String,
              val url: String,
              val logo: String = "",
              val group: String = "",
              val tvgId: String? = null,
              val language: String? = null
          )
          """)
          w(JAVA/"playlist"/"M3UParser.kt", r"""
          package com.example.m3ustream.playlist
          import java.util.Locale
          object M3UParser {
              private val hintMap = mapOf(
                  "ES" to "es","ESP" to "es","SPA" to "es","ESPAÑOL" to "es",
                  "EN" to "en","ENG" to "en","ENGLISH" to "en",
                  "FR" to "fr","FRA" to "fr","FRANÇAIS" to "fr",
                  "PT" to "pt","POR" to "pt","PORTUGUÊS" to "pt",
                  "DE" to "de","GER" to "de","DEUTSCH" to "de",
                  "IT" to "it","ITA" to "it","ITALIANO" to "it"
              )
              fun parse(text: String): List<Channel> {
                  val lines = text.split('\n'); val out = mutableListOf<Channel>(); var i = 0
                  while (i < lines.size) {
                      val line = lines[i].trim()
                      if (line.startsWith("#EXTINF", true)) {
                          val attrs = parseAttrs(line)
                          val name = line.substringAfter(",").trim()
                          val logo = attrs["tvg-logo"] ?: attrs["logo"] ?: ""
                          val group = attrs["group-title"] ?: ""
                          val tvgId = attrs["tvg-id"] ?: attrs["tvgId"]
                          val langAttr = (attrs["tvg-language"] ?: attrs["language"] ?: attrs["audio-language"])?.lowercase(Locale.ROOT)
                          val inferred = inferLanguageFromName(name)
                          var j = i + 1; var url = ""
                          while (j < lines.size) {
                              val l = lines[j].trim()
                              if (l.isNotEmpty() && !l.startsWith("#")) { url = l; break }
                              j += 1
                          }
                          if (url.isNotBlank()) { out.add(Channel(name, url, logo, group, tvgId, langAttr ?: inferred)); i = j }
                      }
                      i += 1
                  }
                  return out
              }
              private fun parseAttrs(info: String): Map<String,String> {
                  val m = mutableMapOf<String,String>()
                  val r = Regex("(\\w[\\w-]*)=\\\"(.*?)\\\"")
                  for (x in r.findAll(info)) m[x.groupValues[1]] = x.groupValues[2]
                  return m
              }
              private fun inferLanguageFromName(name: String): String? {
                  val u = name.uppercase(Locale.ROOT)
                  val token = Regex("[\\[(]([A-Z]{2,3})[)\\]]")
                  for (m in token.findAll(u)) hintMap[m.groupValues[1]]?.let { return it }
                  for ((k,v) in hintMap) if (u.contains(k)) return v
                  return null
              }
          }
          """)
          # EPG mínimo (XMLTV) con Now/Next
          w(JAVA/"epg"/"EpgModels.kt", "package com.example.m3ustream.epg\ndata class EpgProgramme(val channelId:String,val title:String,val startMs:Long,val stopMs:Long)\ndata class NowNext(val now:EpgProgramme?,val next:EpgProgramme?)\n")
          w(JAVA/"epg"/"EpgRepository.kt", r"""
          package com.example.m3ustream.epg
          import android.util.Xml
          import java.io.StringReader
          import java.time.LocalDateTime
          import java.time.ZoneOffset
          import java.time.format.DateTimeFormatter
          import java.util.Locale
          class EpgRepository {
              private val map = mutableMapOf<String, MutableList<EpgProgramme>>()
              fun load(xmlText: String) {
                  map.clear()
                  val p = Xml.newPullParser()
                  p.setFeature(org.xmlpull.v1.XmlPullParser.FEATURE_PROCESS_NAMESPACES, false)
                  p.setInput(StringReader(xmlText))
                  var e = p.eventType; var ch:String?=null; var s:Long=0; var t:Long=0; var inT=false; var title=""
                  while (e != org.xmlpull.v1.XmlPullParser.END_DOCUMENT) {
                      when (e) {
                          org.xmlpull.v1.XmlPullParser.START_TAG -> when (p.name.lowercase(Locale.ROOT)) {
                              "programme" -> { ch=p.getAttributeValue(null,"channel"); s=parse(p.getAttributeValue(null,"start")); t=parse(p.getAttributeValue(null,"stop")); title="" }
                              "title" -> inT=true
                          }
                          org.xmlpull.v1.XmlPullParser.TEXT -> if (inT) title += p.text
                          org.xmlpull.v1.XmlPullParser.END_TAG -> when (p.name.lowercase(Locale.ROOT)) {
                              "title" -> inT=false
                              "programme" -> { ch?.let { (map.getOrPut(it){ mutableListOf() }).add(EpgProgramme(it,title.trim(),s,t)) }; ch=null; title="" }
                          }
                      }
                      e = p.next()
                  }
                  map.values.forEach { it.sortBy { x -> x.startMs } }
              }
              fun nowNext(key:String, now:Long=System.currentTimeMillis()): NowNext {
                  val l = map[key] ?: return NowNext(null,null)
                  var n:EpgProgramme?=null; var nx:EpgProgramme?=null
                  for (p in l) { if (p.startMs<=now && now<p.stopMs) n=p else if (p.startMs>now) { nx=p; break } }
                  return NowNext(n,nx)
              }
              fun hasDataFor(key:String) = map.containsKey(key)
              companion object {
                  private val F = DateTimeFormatter.ofPattern("yyyyMMddHHmmss")
                  fun parse(s:String?):Long{
                      if (s==null or s!!.length<14) return 0
                      return try {
                          val core = s.substring(0,14)
                          val dt = LocalDateTime.parse(core,F)
                          dt.toInstant(ZoneOffset.UTC).toEpochMilli()
                      } catch (_:Throwable){ 0 }
                  }
              }
          }
          """)
          # Player (ExoPlayer + PIP)
          w(JAVA/"player"/"PlayerScreen.kt", """
          package com.example.m3ustream.player
          import android.app.Activity
          import androidx.compose.foundation.layout.*
          import androidx.compose.material3.Button
          import androidx.compose.material3.Text
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.platform.LocalContext
          import androidx.compose.ui.viewinterop.AndroidView
          import com.example.m3ustream.playlist.Channel
          import com.google.android.exoplayer2.ExoPlayer
          import com.google.android.exoplayer2.MediaItem
          import com.google.android.exoplayer2.ui.StyledPlayerView
          import android.view.ViewGroup
          @Composable
          fun PlayerScreen(channel: Channel) {
              val ctx = LocalContext.current
              val exo = remember { ExoPlayer.Builder(ctx).build().apply {
                  setMediaItem(MediaItem.fromUri(channel.url)); prepare(); playWhenReady = true } }
              DisposableEffect(Unit) { onDispose { exo.release() } }
              Column(Modifier.fillMaxSize()) {
                  AndroidView(factory = { c -> StyledPlayerView(c).apply {
                      player = exo; layoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)
                  }}, modifier = Modifier.fillMaxWidth())
                  Spacer(Modifier.weight(1f))
                  Row(Modifier.padding(12.dp)) {
                      val act = ctx as? Activity
                      Button(onClick = { act?.enterPictureInPictureMode() }) { Text("PIP") }
                  }
              }
          }
          """)
          # MainActivity (M3U + Xtream + filtro idioma + EPG + favoritos)
          w(JAVA/"MainActivity.kt", r"""
          package com.example.m3ustream
          import android.content.Context
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.activity.viewModels
          import androidx.compose.foundation.clickable
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Alignment
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.text.input.TextFieldValue
          import androidx.compose.ui.unit.dp
          import androidx.lifecycle.ViewModel
          import androidx.lifecycle.viewModelScope
          import coil.compose.AsyncImage
          import com.example.m3ustream.player.PlayerScreen
          import com.example.m3ustream.playlist.Channel
          import com.example.m3ustream.playlist.M3UParser
          import com.example.m3ustream.epg.EpgRepository
          import kotlinx.coroutines.Dispatchers
          import kotlinx.coroutines.launch
          import kotlinx.coroutines.withContext
          import java.net.URLEncoder
          import java.nio.charset.StandardCharsets
          class MainActivity : ComponentActivity() {
              private val vm: MainViewModel by viewModels()
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContent {
                      MaterialTheme(colorScheme = darkColorScheme()) {
                          val state by vm.uiState.collectAsState()
                          when (val s = state) {
                              is UIState.Input -> InputScreen(
                                  initial = s,
                                  onLoadM3U = { url, epg -> vm.loadFromM3U(this, url, epg) },
                                  onLoadXtream = { server, user, pass, output, epg -> vm.loadFromXtream(this, server, user, pass, output, epg) }
                              )
                              is UIState.ChannelList -> ChannelListScreen(
                                  channels = s.channels, epgRepo = s.epg,
                                  favSetProvider = { Prefs.favs(this) },
                                  onToggleFav = { key -> Prefs.toggleFav(this, key) },
                                  onOpen = { ch -> PlayerScreen(ch) }
                              )
                          }
                      }
                  }
              }
          }
          sealed class UIState {
              data class Input(
                  val m3uUrl: String? = null, val epgUrl: String? = null,
                  val xtServer: String? = null, val xtUser: String? = null, val xtPass: String? = null, val xtOutput: String = "ts"
              ) : UIState()
              data class ChannelList(val channels: List<Channel>, val epg: EpgRepository?) : UIState()
          }
          class MainViewModel : ViewModel() {
              private val _uiState = mutableStateOf<UIState>(UIState.Input())
              val uiState: State<UIState> get() = _uiState
              fun loadFromM3U(context: Context, url: String, epgUrl: String?) { loadAll(context, url, epgUrl) }
              fun loadFromXtream(context: Context, server:String, user:String, pass:String, output:String, epgUrl:String?) {
                  val base = server.trim().trimEnd('/')
                  val m3u = f"{base}/get.php?username=" + enc(user) + "&password=" + enc(pass) + "&type=m3u_plus&output=" + enc(output)
                  loadAll(context, m3u, epgUrl)
              }
              private fun enc(s:String):String = URLEncoder.encode(s, StandardCharsets.UTF_8.name())
              private fun loadAll(context: Context, m3uUrl:String, epgUrl:String?) {
                  viewModelScope.launch {
                      val channels = withContext(Dispatchers.IO) { runCatching { M3UParser.parse(Network.fetchText(m3uUrl)) }.getOrElse { emptyList() } }
                      val epgRepo = if (!epgUrl.isNullOrBlank()) withContext(Dispatchers.IO) {
                          runCatching { EpgRepository().apply { load(Network.fetchText(epgUrl)) } }.getOrNull()
                      } else null
                      if (channels.isNotEmpty()) _uiState.value = UIState.ChannelList(channels, epgRepo)
                  }
              }
          }
          @Composable
          fun InputScreen(initial: UIState.Input, onLoadM3U:(String,String?)->Unit, onLoadXtream:(String,String,String,String,String?)->Unit) {
              var tab by remember { mutableStateOf(0) }
              Column(Modifier.fillMaxSize()) {
                  TabRow(selectedTabIndex = tab) {
                      Tab(selected = tab==0, onClick={tab=0}, text={ Text("M3U") })
                      Tab(selected = tab==1, onClick={tab=1}, text={ Text("Xtream") })
                  }
                  when (tab) {
                      0 -> M3UTab(onLoad = onLoadM3U)
                      1 -> XtreamTab(onLoad = onLoadXtream)
                  }
              }
          }
          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun M3UTab(onLoad:(String,String?)->Unit) {
              var url by remember { mutableStateOf(TextFieldValue("")) }
              var epg by remember { mutableStateOf(TextFieldValue("")) }
              Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                  Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(24.dp)) {
                      OutlinedTextField(value=url, onValueChange={url=it}, label={Text("M3U/M3U8 URL")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(8.dp))
                      OutlinedTextField(value=epg, onValueChange={epg=it}, label={Text("EPG XMLTV (opcional)")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(12.dp))
                      Button(onClick={ onLoad(url.text.trim(), epg.text.trim().ifBlank{ null }) }, enabled = url.text.startsWith("http")) { Text("Cargar") }
                  }
              }
          }
          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun XtreamTab(onLoad:(String,String,String,String,String?)->Unit) {
              var server by remember { mutableStateOf(TextFieldValue("")) }
              var user   by remember { mutableStateOf(TextFieldValue("")) }
              var pass   by remember { mutableStateOf(TextFieldValue("")) }
              var output by remember { mutableStateOf(TextFieldValue("ts")) }
              var epg    by remember { mutableStateOf(TextFieldValue("")) }
              Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                  Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(24.dp)) {
                      OutlinedTextField(value=server, onValueChange={server=it}, label={Text("Servidor/DNS (http[s]://host)")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(6.dp))
                      OutlinedTextField(value=user, onValueChange={user=it}, label={Text("Usuario")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(6.dp))
                      OutlinedTextField(value=pass, onValueChange={pass=it}, label={Text("Contraseña")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(6.dp))
                      OutlinedTextField(value=output, onValueChange={output=it}, label={Text("output (ts o hls)")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(6 dp))
                      OutlinedTextField(value=epg, onValueChange={epg=it}, label={Text("EPG XMLTV (opcional)")}, singleLine=true, modifier=Modifier.fillMaxWidth())
                      Spacer(Modifier.height(12 dp))
                      val ok = server.text.startsWith("http") && user.text.isNotBlank() && pass.text.isNotBlank()
                      Button(onClick={ onLoad(server.text.trim(), user.text.trim(), pass.text.trim(), output.text.trim().ifBlank{"ts"}, epg.text.trim().ifBlank{null}) }, enabled=ok) { Text("Cargar") }
                  }
              }
          }
          @Composable
          fun ChannelListScreen(channels: List<Channel>, epgRepo: EpgRepository?, favSetProvider:()->Set<String>, onToggleFav:(String)->Set<String>, onOpen:(Channel)->Unit) {
              var query by remember { mutableStateOf("") }
              val languages = remember(channels) { channels.mapNotNull { it.language }.toSet().toList().sorted() }
              var selectedLang by remember { mutableStateOf<String?>(null) }
              var onlyFav by remember { mutableStateOf(false) }
              val favs = remember { mutableStateOf(setOf<String>()) }
              LaunchedEffect(Unit) { favs.value = favSetProvider() }
              Column(Modifier.fillMaxSize()) {
                  Row(Modifier.padding(8.dp), verticalAlignment = Alignment.CenterVertically) {
                      OutlinedTextField(value=query, onValueChange={query=it}, label={Text("Buscar")}, singleLine=true, modifier=Modifier.weight(1f))
                      Spacer(Modifier.width(8.dp))
                      AssistChip(onClick={ onlyFav = !onlyFav }, label={ Text(if (onlyFav) "Favoritos ✓" else "Favoritos") })
                  }
                  if (languages.isNotEmpty()) {
                      Row(Modifier.padding(horizontal=8.dp, vertical=4.dp)) {
                          FilterChip(selected=selectedLang==null, onClick={ selectedLang=null }, label={ Text("Todos") })
                          Spacer(Modifier.width(8.dp))
                          languages.forEach { lang ->
                              Spacer(Modifier.width(4 dp))
                              FilterChip(selected=selectedLang==lang, onClick={ selectedLang=lang }, label={ Text(lang.uppercase()) })
                          }
                      }
                  }
                  val filtered = channels.filter { ch ->
                      val matchQ = ch.name.contains(query, true) || ch.group.contains(query, true)
                      val matchLang = selectedLang?.let { ch.language == it } ?: true
                      val key = ch.tvgId ?: ch.name
                      val matchFav = if (onlyFav) favs.value.contains(key) else true
                      matchQ && matchLang && matchFav
                  }
                  LazyColumn(Modifier.fillMaxSize()) {
                      items(filtered) { ch ->
                          ChannelRow(ch, epgRepo, isFav = favs.value.contains(ch.tvgId ?: ch.name)) {
                              val set = onToggleFav(ch.tvgId ?: ch.name); favs.value = set
                          } onOpen@{ onOpen(ch) }
                          Divider()
                      }
                  }
              }
          }
          @Composable
          fun ChannelRow(channel: Channel, epgRepo: EpgRepo
